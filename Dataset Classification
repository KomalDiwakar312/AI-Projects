import sys
print("python: {}".format(sys.version))

import scipy
print("Scipy: {}".format(scipy.__version__))


import numpy as np
print("Numpy: {}".format(np.__version__))

import pandas as pd
print("Pandas: {}".format(pd.__version__))

import matplotlib
print("Matplotlib: {}".format(matplotlib.__version__))


import sklearn
print("Sklearn: {}".format(sklearn.__version__))

from pandas.plotting import scatter_matrix
from pandas import read_csv
from matplotlib import pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import StratifiedKFold
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression 
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC
from sklearn import model_selection
from sklearn.ensemble import VotingClassifier

#loading the data set : iris data set
dataset=pd.read_csv("C:/Users/dell/OneDrive/Documents/Iris.csv")

print(dataset.shape)
print(dataset.head(5))
print(dataset.describe())
#class distribution
print(dataset.groupby("Species").size())

#univariate plots - box and whisker plots
dataset.plot(kind="box",subplots=True, layout=(3,2), sharex=False, sharey=False)
plt.show()

#histogram of the variable
dataset.hist()
plt.show()

#multivariate plots
scatter_matrix(dataset)
plt.show()

#creating a validation dataset
#splitting dataset
array=dataset.values
X=array[:,0:4]
Y=array[:,4]
X_train, X_validation, Y_train, Y_validation = train_test_split(X,Y,test_size=0.2,random_state=1)

# Linear Regression
# Linear Discriminant Analysis
# K-Nearest Neighbours
# Classification and Regression Trees
# Gausssian Naive Bayes
# Support Vecotr Machines

#Building models
models=[]
models.append(("LR",  LogisticRegression(solver="liblinear", multi_class="ovr")))
models.append(("LDA",LinearDiscriminantAnalysis()))
models.append(("KNN", KNeighborsClassifier()))
models.append(("NB", GaussianNB()))
models.append(("SVM", SVC(gamma="auto")))

#evaluate the created models
results=[]
names=[]
for name,model in models:
    kfold=StratifiedKFold(n_splits=10, random_state= None)
    cv_results= cross_val_score(model, X_train, Y_train, cv=kfold, scoring="accuracy")
    results.append(cv_results)
    names.append(name)
    print("%s: %f (%f)" % (name, cv_results.mean(), cv_results.std()))

#compare our models
plt.boxplot(results, labels=names)
plt.title("Algorithm comparison")
plt.show()

#make predictions on svm
model=SVC(gamma="auto")
model.fit(X_train, Y_train)
predictions=model.predict(X_validation)

#evaluate our predictions 
print(accuracy_score(Y_validation, predictions))
print(confusion_matrix(Y_validation,predictions))
print(classification_report(Y_validation, predictions))
